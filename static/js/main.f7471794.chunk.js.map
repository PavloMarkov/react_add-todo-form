{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","props","user","className","href","email","name","TodoInfo","todo","id","completed","title","classNames","TodoList","todos","map","username","todosWithUsers","userId","chosen","usersFromServer","find","App","useState","chosenUserValue","setChosenUserValue","newTitle","setNewTitle","listWithUsers","setListWithUsers","addClicked","setAddClicked","isUserNotChosen","action","method","onSubmit","event","preventDefault","trim","length","chosenUser","maxId","Math","max","el","list","createTask","htmlFor","type","placeholder","value","onChange","titleToAdd","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7471794.chunk.js","sourcesContent":["type Props = {\n  user: User;\n};\n\ntype User = {\n  name: string;\n  email: string;\n};\n\nexport const UserInfo = (props: Props) => {\n  const { user } = props;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { UserWithTodo } from '../../types/UserWithTodo';\n\ntype Props = {\n  todo: UserWithTodo;\n};\n\nexport const TodoInfo = (props: Props) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = props.todo;\n\n  return (\n    <article\n      data-id={`${id}`}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n      key={id}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { UserWithTodo } from '../../types/UserWithTodo';\n\ntype Props = {\n  todos: UserWithTodo[];\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import classNames from 'classnames';\n\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst todosWithUsers = todosFromServer.map(todo => {\n  const chosen = usersFromServer.find(user => user.id === todo.userId);\n\n  return {\n    ...todo,\n    user: chosen || null,\n  };\n});\n\nexport const App = () => {\n  const [chosenUserValue, setChosenUserValue] = useState('0');\n  const [newTitle, setNewTitle] = useState('');\n  const [listWithUsers, setListWithUsers] = useState(todosWithUsers);\n  const [addClicked, setAddClicked] = useState(false);\n  const isUserNotChosen = chosenUserValue === '0';\n\n  const createTask = () => {\n    if (!newTitle.trim().length || chosenUserValue === '0') {\n      return;\n    }\n\n    const chosenUser = usersFromServer.find(user => (\n      user.id === +chosenUserValue));\n\n    if (!chosenUser) {\n      return;\n    }\n\n    const maxId = Math.max(...listWithUsers.map(el => el.id));\n\n    setListWithUsers(list => ([\n      ...list,\n      {\n        user: chosenUser,\n        id: (maxId + 1),\n        title: newTitle,\n        completed: false,\n        userId: chosenUser.id,\n      },\n    ]));\n\n    setAddClicked(false);\n    setNewTitle('');\n    setChosenUserValue('0');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          setAddClicked(true);\n          createTask();\n        }}\n      >\n        <div className=\"field\">\n          <label\n            htmlFor=\"todoTitle\"\n            className=\"label\"\n          >\n            Title\n          </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"write the Title of todo\"\n            value={newTitle}\n            id=\"todoTitle\"\n            className={classNames('input',\n              { 'is-danger': (addClicked && !newTitle) })}\n            onChange={(event) => {\n              const { value } = event.target;\n              const titleToAdd = value.replace(/[.*+!@#&%^?^${}()|[\\]\\\\]/g, '');\n\n              setNewTitle(titleToAdd);\n            }}\n          />\n          {addClicked && !newTitle && (\n            <span className=\"error span\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label\n            htmlFor=\"userTodo\"\n            className=\"label\"\n          >\n            User:\n          </label>\n          <div className={classNames('select',\n            { 'is-danger': addClicked && isUserNotChosen })}\n          >\n            <select\n              data-cy=\"userSelect\"\n              value={chosenUserValue}\n              id=\"userTodo\"\n              onChange={(event) => (\n                setChosenUserValue(event.target.value))}\n            >\n              <option\n                value=\"0\"\n                disabled\n              >\n                Choose a user\n              </option>\n              {usersFromServer.map(user => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {addClicked && isUserNotChosen && (\n            <div>\n              <span className=\"error span\">\n                Please choose a user\n              </span>\n            </div>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"button\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={listWithUsers}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}